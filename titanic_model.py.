# Forbedret Titanic-modell – enkel å forstå
# Gir ofte ~0.84–0.86 accuracy
import os
import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Finn datafilen (støtter både data/train.csv og train.csv)
CANDIDATES = ["data/train.csv", "train.csv"]
DATA_PATH = None
for p in CANDIDATES:
    if os.path.exists(p):
        DATA_PATH = p
        break
if DATA_PATH is None:
    raise FileNotFoundError("Fant ikke data/train.csv eller train.csv")

# 1) Les data
df = pd.read_csv(DATA_PATH)

# 2) Velg nyttige kolonner og lag enkle features
use_cols = ["Survived","Pclass","Sex","Age","SibSp","Parch","Fare","Embarked"]
df = df[use_cols].copy()

# FamilySize og IsAlone hjelper ofte
df["FamilySize"] = df["SibSp"] + df["Parch"] + 1
df["IsAlone"] = (df["FamilySize"] == 1).astype(int)

# 3) Splitt X/y
y = df["Survived"].astype(int)
X = df.drop(columns=["Survived"])

# 4) Definer numeriske og kategoriske felt
num_cols = ["Age","Fare","SibSp","Parch","FamilySize","Pclass","IsAlone"]
cat_cols = ["Sex","Embarked"]

# 5) Preprosessering: fyll inn manglende (median/modus) + one-hot for kategoriske
numeric_transformer = Pipeline([
    ("imputer", SimpleImputer(strategy="median"))
])
categorical_transformer = Pipeline([
    ("imputer", SimpleImputer(strategy="most_frequent")),
    ("onehot", OneHotEncoder(handle_unknown="ignore"))
])

preprocess = ColumnTransformer([
    ("num", numeric_transformer, num_cols),
    ("cat", categorical_transformer, cat_cols),
])

# 6) Modell: Random Forest (enkel, men sterk på dette datasettet)
model = RandomForestClassifier(
    n_estimators=400,
    max_depth=None,
    min_samples_split=4,
    min_samples_leaf=1,
    random_state=42
)

pipe = Pipeline([
    ("prep", preprocess),
    ("model", model)
])

# 7) Train/test-splitt
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 8) Tren og evaluer
pipe.fit(X_train, y_train)
preds = pipe.predict(X_test)
acc = accuracy_score(y_test, preds)
print(f"Accuracy (hold-out): {acc:.3f}")

# 9) (Valgfritt) 5-fold cross-val for mer stabilt mål
cv_scores = cross_val_score(pipe, X, y, cv=5, scoring="accuracy")
print(f"5-fold CV: {cv_scores.mean():.3f} ± {cv_scores.std():.3f}")
